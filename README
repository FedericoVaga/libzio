The main purpose of the libzio library is to make an easy API to handle
ZIO devices. The libzio library is made of the following files:
- libzattr.c
- libzio.c

libsysfs.c libsysfs.h ---------------------------------------------------------
This is a little library to handle the sysfs in a way usefull for ZIO. I think
it can be useful also for a generic program which need to handle with some
sysfs directory; but, it is _not_ my intention to create a sysfs library. I
create this tiny generic library only for my libzio which use sysfs.

Anyway, this library can read/write a sysfs attribute and build the
sysfs structure from a root directory. This is useful for ZIO because:
- ZIO use sysfs to export device registers/parameters, so user must read/write
  sysfs attribute
- ZIO organize its device on 3 sub-directory level. With the build tree
  function you can reproduce the ZIO device organization


libzattr.c --------------------------------------------------------------------
Within this file there are the function to read and write ZIO attributes. All
these function accept two argument: the sysfs attribute wich represent the
ZIO attribute, and the element to read/write through the attribute.

	int zio_read_attribute(struct sysfs_attr *attr, uint32_t *value)
	int zio_write_attribute(struct sysfs_attr *attr, uint32_t value)

When you use these functions you can read or write on a ZIO sysfs attribute.

	int zio_read_control(struct sysfs_attr *attr, struct zio_control *ctrl)
	int zio_write_control(struct sysfs_attr *attr, struct zio_control *ctrl)

When you use these functions you can read or write on a current_control
attribute.

	int zio_get_module(struct sysfs_attr *attr, char *name)
	int zio_set_module(struct sysfs_attr *attr, char *name)

When you use these functions you can configure the module to use for your
buffer, trigger or interface.